% Sia dato un grafo orientato G=<V,E> tale che gli archi in E siano pesati (pesi solo positivi), 
% e che l’insieme dei nodi V sia tri-partito in tre sottoinsiemi A, B e C; i sottoinsiemi sono 
% tali che tutti gli archi uscenti dai nodi in A incidono solo su nodi in B, e tutti gli 
% archi uscenti dai nodi in B incidono solo su nodi in C. Il grafo è tale che da ogni nodo in A 
% si può raggiungere qualunque nodo in C. Rimuovendo una parte dei nodi in B (e quindi anche 
% gli archi entranti/uscenti corrispondenti), si intende trovare un sotto-grafo di G che abbia 
% le seguenti caratteristiche: 
%
% •	(condizione necessaria): la completa raggiungibilità da A a C è mantenuta;
% •	(cosa più importante): la cardinalità di B è minima;
% •	(cosa meno importante): massimizzare il peso degli archi che da B vanno in C.
%
% Modello dei dati in INPUT:
% •	node(X,I)    		 i nodi in V del grafo in input, dove I indica il gruppo (a,b o c)
% •	arc(X,Y,W)    	 gli archi in E del grafo in input, dove W indica il peso
%
% Modello dei dati in OUTPUT:
% •	keepNode(X,I)	 i nodi da tenere
% •	keepArc(X,Y,W)	 gli archi da tenere
% •	cardinalityOfB(X)	 il numero di nodi in B nel grafo ottenuto
% •	totalGainBtoC(X)	 la somma totale dei pesi degli archi da B in C.


% a: 1,2,4
% b: 3,5,9
% c: 6,7,8

node(1,a).
node(2,a).
node(3,b).
node(4,a).
node(5,b).
node(6,c).
node(7,c).
node(8,c).
node(9,b).

arc(1,4,3).
arc(2,3,3).
arc(2,4,2).
arc(3,5,2).
arc(3,6,6).
arc(4,3,5).
arc(4,5,6).
arc(5,6,1).
arc(5,9,5).
arc(6,7,6).
arc(6,8,4).
arc(6,9,2).
arc(9,8,4).

% keepNode(X,I).
% keepArc(X,Y,W).
% cardinalityOfB(X).
% totalGainBtoC(X).

% Guess
keepNode(X,b) | discardNode(X,b) :- node(X,b).

keepNode(X,a) :- node(X,a).
keepNode(X,c) :- node(X,c).
keepArc(X,Y,W) :- arc(X,Y,W), keepNode(X,b), keepNode(Y,_).                    % Mantengo archi uscenti da B
keepArc(X,Y,W) :- arc(X,Y,W), keepNode(X,I), I<>b.              % Mantengo archi entranti in B

% Check
%% la completa raggiungibilità da A a C è mantenuta;
%%% Costruisco chiusura transitiva del nuovo sotto-grafo
reaches(X,Y) :- keepArc(X,Y,_).
reaches(A,C) :- reaches(A,B), keepArc(B,C,_).

%% Non vorrei che ci siano nodi in A che non possono raggiungere nodi in C
:- keepNode(X,a), keepNode(Y,c), not reaches(X,Y).

% Optimize
%% (cosa più importante): la cardinalità di B è minima; => non vorrei che ci siano nodi in B
:~ keepNode(X,b). [1@2, X]

%% (cosa meno importante): massimizzare il peso degli archi che da B vanno in C. => minimizzare il peso di quelli rimasti fuori
discardArc(X,Y,W) :- arc(X,Y,W), not keepArc(X,Y,W).
:~ discardArc(X,Y,W), keepNode(Y,c). [W@1, X,Y]

% Others
%% La somma totale dei pesi degli archi da B in C.
totalGainBtoC(X) :- #sum{W,A,B : keepArc(A,B,W), keepNode(A,b)}=X.

%% Il numero di nodi in B nel grafo ottenuto
cardiB(X) :- #count{N : keepNode(N,b)}=X.
