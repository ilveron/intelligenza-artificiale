% == == == == == == == == == == == == == == == == == == == == == == == == == == == 
% Scrivere un programma logico disgiuntivo che calcoli tutte 
% le cricche di dimensione data (tramite un fatto "clique(k)" 
% -- esempio: "clique(3).) di un dato grafo, rappresentato 
% tramite la relazione binaria arc(Nodo1, Nodo2).

arc(1,2).
arc(2,3).
arc(3,4).
arc(1,5).
arc(3,5).
arc(2,5).
arc(1,3).

clique(2).

arc(Y,X) :- arc(X,Y).

node(N) :- arc(N,_).

% Guess
inClique(N) | outClique(N) :- node(N).

% Check
%% Non è possibile che ci siano due nodi nella cricca non collegati fra loro
:- inClique(X), inClique(Y), not arc(X,Y), X<>Y.

%% Non è possibile che ci siano più di Z elementi nella cricca.
:- N=#count{X : inClique(X)}, clique(Z), N<>Z.