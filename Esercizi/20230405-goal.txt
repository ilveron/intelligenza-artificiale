% == == == == == == == == == == == == == == == == == == == == == == == == == == == 
% Si consideri il seguente programma logico e se ne calcolino gli 
% answer set, illustrando adeguatamente il procedimento seguito.

goal(X,Y) | noGoal(X,Y) :- not fuorigioco(Y), tiro(X,Y), not parata(Z,Y), portiere(Z).

goal(X,Y) :- tiro(X,Y), not parata(Z,Y), not fuori(X,Y), portiere(Z).
parata(Z,Y) :- tiro(X,Y), not goal(X,Y), portiere(Z).

:- #count{ X : goal(X,Y) } > 1.

tiro(1,2).
tiro(4,6).
portiere(a).
fuorigioco(6).

% Istanziazione

parata(a,2) :- tiro(1,2), not goal(1,2), portiere(a).
parata(a,6) :- tiro(4,6), not goal(4,6), portiere(a).                                           
goal(1,2) :- tiro(1,2), not parata(a,2), not fuori(1,2), portiere(a).                           % "not fuori(1,2) sarà sicuramente vero, quindi lo si rimuove
goal(4,6) :- tiro(4,6), not parata(a,6), not fuori(4,6), portiere(a).                           % "not fuori(4,6) sarà sicuramente vero, quindi lo si rimuove
goal(1,2) | noGoal(1,2) :- not fuorigioco(2), tiro(1,2), not parata(a,2), portiere(a).          % "not fuorigioco(2)" sarà sicuramente vero, quindi lo si rimuove
goal(4,6) | noGoal(4,6) :- not fuorigioco(6), tiro(4,6), not parata(a,6), portiere(a).          % Si rimuove tutta le regola perchè "not fuorigioco(6)" sarà sempre falso

:- #count{ X : goal(1,2) } > 1.
:- #count{ X : goal(4,6) } > 1.

tiro(1,2).
tiro(4,6).
portiere(a).
fuorigioco(6).


% Semplifico istanziazione

parata(a,2) :- not goal(1,2).
parata(a,6) :- not goal(4,6).
goal(1,2) :- not parata(a,2).
goal(4,6) :- not parata(a,6).
goal(1,2) | noGoal(1,2) :- not parata(a,2).

:- #count{ X : goal(1,2) } > 1.
:- #count{ X : goal(4,6) } > 1.

tiro(1,2).
tiro(4,6).
portiere(a).
fuorigioco(6).


% Cerco modelli
I1: {tiro(1,2), tiro(4,6), portiere(a), fuorigioco(6), parata(a,2), parata(a,6)}
I2: {tiro(1,2), tiro(4,6), portiere(a), fuorigioco(6), parata(a,2), goal(4,6)}
I3: {tiro(1,2), tiro(4,6), portiere(a), fuorigioco(6), goal(1,2), parata(a,6)}


% Faccio il ridotto per ogni interpretazione
% I1: {tiro(1,2), tiro(4,6), portiere(a), fuorigioco(6), parata(a,2), parata(a,6)}

parata(a,2).
parata(a,6).

:- #count{ X : goal(1,2) } > 1.
:- #count{ X : goal(4,6) } > 1.

tiro(1,2).
tiro(4,6).
portiere(a).
fuorigioco(6).

%%% I1 è un modello per il ridotto, è minimale, è supportato, possiamo dire che è un AS anche per il programma d'origine


% I2: {tiro(1,2), tiro(4,6), portiere(a), fuorigioco(6), parata(a,2), goal(4,6)}

parata(a,2).
goal(4,6).

:- #count{ X : goal(1,2) } > 1.
:- #count{ X : goal(4,6) } > 1.

tiro(1,2).
tiro(4,6).
portiere(a).
fuorigioco(6).

%%% I2 è un modello per il ridotto, è minimale, è supportato, possiamo dire che è un AS anche per il programma d'origine


% I3: {tiro(1,2), tiro(4,6), portiere(a), fuorigioco(6), goal(1,2), parata(a,6)}

parata(a,6).
goal(1,2).
goal(1,2) | noGoal(1,2).

:- #count{ X : goal(1,2) } > 1.
:- #count{ X : goal(4,6) } > 1.

tiro(1,2).
tiro(4,6).
portiere(a).
fuorigioco(6).

%%% I3 è un modello per il ridotto, è minimale, è supportato, possiamo dire che è un AS anche per il programma d'origine
