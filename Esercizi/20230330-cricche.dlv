% Esercizio 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CRICCHE (massimali)
% Dato un grafo G = <N, A>, diciamo che G ha una cricca di dimensione k se c'e' un insieme di k nodi tale che 
% ogni coppia di nodi al suo interno e' connessa da un arco.
% Scrivere un programma logico disgiuntivo che calcoli tutte le cricche massimali (cioe' insiemi tali per cui 
% non c'e' nessun nodo che possa essere aggiunto senza perdere la proprieta' di essere una cricca) di un dato 
% grafo, rappresentato tramite la relazione binaria arc(Nodo1, Nodo2).

arc(1,2).
arc(2,3).
arc(3,4).
arc(1,5).
arc(3,5).
arc(2,5).
arc(1,3).

arc(Y,X) :- arc(X,Y).           % Per simmetria (grafo NON orientato)
node(X) :- arc(_, X).

% Guess

inClique(X) | outClique(X) :- node(X).


% Aux rules

%%% Mi segno tutte le connessioni che ci sono da fuori verso dentro
connessioniDaOutAdIn(X,Y) :- outClique(X), inClique(Y), arc(X,Y).

%%% Mi segno tutte le connessioni che mancano
nodiCheHannoConnessioniMancanti(X) :- outClique(X), inClique(Y), not connessioniDaOutAdIn(X,Y).


% Check

:- inClique(X), inClique(Y), not arc(X,Y), X<>Y.

%%% Se, dato un nodo X fuori dalla cricca, NON ha connessioni mancanti verso l'interno della cricca,
%%% vuol dire che DOVREBBE far parte della cricca, quindi scarto
:- outClique(X), not nodiCheHannoConnessioniMancanti(X).