p(Y,X) :- a(X,Y), b(Y), not t(X,Y).
t(X,X) :- p(_,Y), X=Y+1.
a(X,X) | b(X) :- s(X,X).

s(2,2). s(1,2).
p(1,1).
b(1).

:- a(X,X), p(Y,_), X!=Y.

%%% Istanziazione

% Step 1
t(2,2).
a(2,2) | b(2).                          % ATTENZIONE: a(2,2) e b(2) NON possono essere veri contemporaneamente
% Step 2 (provo con "a(2,2)")
p(2,2) :- a(2,2), b(2), not t(2,2).     % NON va bene, sia perchè abbiamo "not t(2,2)", che sarà sempre falso, sia per il motivo scritto sopra     
% Step 2 (provo con "b(2)")
p(2,2) :- a(2,2), b(2), not t(2,2).     % Stessa identica regola, stesso identico motivo per cui NON va bene     

%%% quindi

% Programma ground 
s(2,2). s(1,2).
p(1,1).
b(1).

t(2,2).
a(2,2) | b(2).      

:- a(2,2), p(1,_), X!=Y.                % Quindi tutti gli AS che comprendono "a(2,2)" verranno scartati

AS: {
    {s(2,2), s(1,2), p(1,1), b(1), t(2,2), b(2)}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%

a(X,Z) :- b(X,Z,Y), not c(Z).
c(X) :- d(X,Y), not a(X,X).
b(X,Y,Z) :- d(X,Y), d(Y,Z).
c(Y) | f(X,Y) :- a(Y,X).

:- b(X,Y,Z), c(X).

d(1,1). d(2,1).

%%% Istanziazione

% Step 1
c(1) :- not a(1,1).
c(2) :- not a(2,2).
b(1,1,1).
b(2,1,1).

% Step 2
a(1,1) :- not c(1).
a(2,1) :- not c(1).

% Step 3
c(1) | f(1,1) :- a(1,1).
c(2) | f(1,2) :- a(2,1).

% Step 4
:- c(1).                                % "b(1,1,1)" e "b(2,1,1)" li sappiamo essere sicuramente veri, quindi non li scriviamo
:- c(2).

%%% quindi

% Programma ground

c(1) :- not a(1,1).
c(2) :- not a(2,2).
b(1,1,1).
b(2,1,1).
a(1,1) :- not c(1).
a(2,1) :- not c(1).
c(1) | f(1,1) :- a(1,1).
c(2) | f(1,2) :- a(2,1).

:- c(1).                                % "b(1,1,1)" e "b(2,1,1)" li sappiamo essere sicuramente veri, quindi non li scriviamo
:- c(2).

d(1,1). d(2,1).

% PER CASA: Trovare gli AS (sono 2 senza costraint), con il costraint diventa INCONSISTENTE (0 AS)
(Candidati) AS: {
    {d(1,1), d(2,1), c(1), c(2), b(1,1,1), b(2,1,1)},                               % NON soddisfa constraint => Non è un AS
    {d(1,1), d(2,1), a(1,1), a(2,1), b(1,1,1), b(2,1,1), f(1,1), f(1,2), c(2)}      % NON soddisfa constraint => Non è un AS
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%

p(X) | l(X) :- f(X), not m(X).
m(X) :- f(X), not p(X).
f(X) :- t(X,Y), m(Y).

m(1).
f(3).
t(2,3). t(4,2).
p(4).

% Istanziazione

% Step 1
f(2) :- m(3).
f(4) :- m(2).
m(3) :- not p(3).
p(3) | l(3) :- not m(3).

% Step 2
p(2) | l(2) :- f(2), not m(2).
p(4) | l(4) :- f(4), not m(4).
m(2) :- f(2), not p(2).
m(4) :- f(4), not p(4).

%%% quindi

% Programma ground

f(2) :- m(3).
f(4) :- m(2).
m(3) :- not p(3).
p(3) | l(3) :- not m(3).
p(2) | l(2) :- f(2), not m(2).
p(4) | l(4) :- f(4), not m(4).
m(2) :- f(2), not p(2).
m(4) :- f(4), not p(4).                 % Questa regola sarà sempre falsa

m(1).
f(3).
t(2,3). t(4,2).
p(4).


% PER CASA: Trovare gli AS (sono 8, di cui 5 non vanno bene), e i ridotti associati             (e perchè ne trovo 6???????)
(Candidati) AS: {
    I1: {m(1), f(3), t(2,3), t(4,2), p(4),      m(3), f(2),     m(2), f(4),     p(4)},      % OK
    I2: {m(1), f(3), t(2,3), t(4,2), p(4),      m(3), f(2),     m(2), f(4),     l(4)},      % NO
    I3: {m(1), f(3), t(2,3), t(4,2), p(4),      m(3), f(2),     p(2)},                      % OK
    I4: {m(1), f(3), t(2,3), t(4,2), p(4),      m(3), f(2),     l(2)},                      % NO
    I5: {m(1), f(3), t(2,3), t(4,2), p(4),      p(3)},                                      % OK
    I6: {m(1), f(3), t(2,3), t(4,2), p(4),      l(3)},                                      % NO
}

% Ridotti (se corpo falso -> rimuovo regola)

% I1: {m(1), f(3), t(2,3), t(4,2), p(4), m(3), f(2), m(2), f(4), p(4)}

f(2) :- m(3).
f(4) :- m(2).
m(3).
p(4) | l(4) :- f(4).
m(2) :- f(2).

m(1).
f(3).
t(2,3). t(4,2).
p(4).

%%% I1 è un AS per il ridotto, ed è supportato. Quindi è un AS anche per il programma di partenza.


% I2: {m(1), f(3), t(2,3), t(4,2), p(4), m(3), f(2), m(2), f(4), l(4)}

f(2) :- m(3).
f(4) :- m(2).
m(3).
p(4) | l(4) :- f(4).            % l(4) non può essere supportato da questa regola perchè è anche vero p(4)
m(2) :- f(2)

m(1).
f(3).
t(2,3). t(4,2).
p(4).

%%% I2 NON è supportato dal ridotto, quindi NON è un AS


% I3: {m(1), f(3), t(2,3), t(4,2), p(4), m(3), f(2), p(2)}

f(2) :- m(3).
m(3).
p(2) | l(2) :- f(2).

m(1).
f(3).
t(2,3). t(4,2).
p(4).

%%% I3 è un AS per il ridotto, ed è supportato. Quindi è un AS anche per il programma di partenza.


% I4: {m(1), f(3), t(2,3), t(4,2), p(4), m(3), f(2), l(2)}

f(2) :- m(3).
f(4) :- m(2).
m(3).
p(2) | l(2) :- f(2).
p(4) | l(4) :- f(4).
m(2) :- f(2).               % f(2) è vero mentre m(2) falso

m(1).
f(3).
t(2,3). t(4,2).
p(4).

%%% I4 NON è un AS per il ridotto. Quindi non lo è nemmeno per il programma di partenza


% I5: {m(1), f(3), t(2,3), t(4,2), p(4), p(3)}

p(3) | l(3).

m(1).
f(3).
t(2,3). t(4,2).
p(4).

%%% I5 è un AS per il ridotto, ed è supportato. Quindi è un AS anche per il programma di partenza.


% I6: {m(1), f(3), t(2,3), t(4,2), p(4), l(3)}

m(3).                       % m(3) Non è presente nell'interpretazione
p(3) | l(3).

m(1).
f(3).
t(2,3). t(4,2).
p(4).

%%% I6 NON è un AS per il ridotto. Quindi non lo è nemmeno per il programma di partenza


%%%%%%%%%%%%%%%%%%%%%%%%%%%%

a(X) :- not b(X), not q(X,1), s(X).
q(X,Y) | b(X) :- a(X), a(Y). 

s(1). s(2).

% Istanziazione

% Step 1
a(1) :- not b(1), not q(1,1).
a(2) :- not b(2), not q(2,1).

% Step 2
q(1,1) | b(1) :- a(1). 
q(1,2) | b(1) :- a(1), a(2). 
q(2,1) | b(2) :- a(2), a(1). 
q(2,2) | b(2) :- a(2).

%%% quindi

% Programma ground
a(1) :- not b(1), not q(1,1).
a(2) :- not b(2), not q(2,1).
q(1,1) | b(1) :- a(1). 
q(1,2) | b(1) :- a(1), a(2). 
q(2,1) | b(2) :- a(2), a(1). 
q(2,2) | b(2) :- a(2).

s(1). s(2).

% Questo programma è INCONSISTENTE (non ha AS)